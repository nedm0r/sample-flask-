pipeline {
    agent any
    triggers {
        pollSCM('*/5 * * * *')
    }
    environment {
        VM_IP = "192.168.59.1"
    }
    stages {
        stage('Cleanup') {
            steps {
                script {
                    sh 'echo "Performing cleanup..."'
                    sh 'pwd'
                    sh 'rm -rf *'
                }
            }
        }
        
        stage('Clone') {
            steps {
                script {
                    sh 'echo "Building..."'
                    sh 'git clone git@github.com:nedm0r/sample-flask-.git'
                    sh 'ls'
                }
            }
        }
        
        stage('Upload to Docker Hub') {
            steps {
                script {
                    sh '''
                        cd /var/lib/jenkins/workspace/Pipeline-K8S/sample-flask-/flask
                        python3 finddockerver.py
                        cd /var/lib/jenkins/workspace/Pipeline-K8S/sample-flask-/Mysql
                        python3 findsqlver.py
                    '''
                }
            }
        }
        
        stage('Testing') {
            steps {
                script {
                    sh 'kubectl config use-context docker-desktop'
                    sh 'kubectl delete -f /var/lib/jenkins/workspace/Pipeline-K8S/sample-flask-/Create-Cluster.yaml --ignore-not-found'
                    sh '''
                     cd /var/lib/jenkins/workspace/Pipeline-K8S/sample-flask-/my-flask-app-chart/
                     python3 version-control-helm.py
                     rm -rf charts/*
                     helm package . --destination charts/
                     helm repo index charts/ --url gs://helm-files
                     gsutil cp charts/* gs://helm-files
                     cd ..
                     helm-install.sh
                 '''
                    try {
                        echo "Testing test environment..."
                        retry(30) {
                            sleep 20
                            sh "curl ${env.VM_IP}:5000"
                        }
                    } catch (Exception e) {
                        echo "Error: ${e.getMessage()}"
                        error "Failed To Curl Test"
                    }
                    sh 'kubectl delete -f /var/lib/jenkins/workspace/Pipeline-K8S/sample-flask-/Create-Cluster.yaml'
                }
            }
        }
        
        // Rest of your stages
        
    }
}

def getExternalIP() {
    return sh(returnStdout: true, script: 'kubectl get service my-flask-app -o jsonpath="{.status.loadBalancer.ingress[0].ip}"').trim()
}
