pipeline {
    agent any
    triggers {
        pollSCM('*/5 * * * *')
    }
    stages {
        stage('Cleanup') {
            steps {
                script {
                    env.VM_IP = "192.168.59.1"
                }
                sh 'echo "Performing cleanup..."'
                sh 'pwd'
                sh 'rm -rf *'
            }
        }
        
        stage('Clone') {
            steps {
                sh 'echo "Building..."'
                sh 'git clone git@github.com:nedm0r/sample-flask-.git'
                sh 'ls'
            }
        }
        
        stage('Upload to Docker Hub') {
            steps {
                sh '''
                    cd /var/lib/jenkins/workspace/Pipeline-K8S/sample-flask-/flask
                    python3 finddockerver.py
                    cd /var/lib/jenkins/workspace/Pipeline-K8S/sample-flask-/Mysql
                    python3 findsqlver.py
                '''
            }
        }
        
        stage('Testing') {
            steps {
                sh 'kubectl config use-context docker-desktop'
                sh 'kubectl delete -f /var/lib/jenkins/workspace/Pipeline-K8S/sample-flask-/Create-Cluster.yaml --ignore-not-found'
                sh 'kubectl apply -f /var/lib/jenkins/workspace/Pipeline-K8S/sample-flask-/Create-Cluster.yaml'
                script {
                    try {
                        echo "Testing test environment..."
                        retry(30) {
                            sleep 10
                            sh "curl ${env.VM_IP}:5000"
                        }
                    } catch (Exception e) {
                        echo "Error: ${e.getMessage()}"
                        error "Failed To Curl Test"
                    }
                }
                sh 'kubectl delete -f /var/lib/jenkins/workspace/Pipeline-K8S/sample-flask-/Create-Cluster.yaml'
            }
        }
        
        stage('Confirm Deployment') {
            steps {
                input "Do you want to proceed with the deployment to production?"
            }
        }
        
        stage('Terraform Deployment') {
            steps {
                sh 'echo "Deploying with Terraform..."'
                sh '''
                    cd /var/lib/jenkins/workspace/Pipeline-K8S/sample-flask-/terraform-files/
                    ls
                    chmod +r main.tf variables.auto.tfvars variables.tf
                    export GOOGLE_APPLICATION_CREDENTIALS="/var/lib/jenkins/.ssh/astute-impulse-393207-a213fc4eab2e.json"
                    terraform init
                    terraform refresh 
                    terraform apply -auto-approve 
                '''
            }
        }
        
        stage('Deploy') {
            steps {
                script {
                    echo "Deploying..."
                    echo "Deploying to production..."
                    
                    sh 'gcloud container clusters get-credentials devops-1093-cluster-tf --project=astute-impulse-393207 --zone=us-east1-b'
                    sh 'kubectl config use-context gke_astute-impulse-393207_us-east1-b_devops-1093-cluster-tf'
                    sh 'kubectl apply -f /var/lib/jenkins/workspace/Pipeline-K8S/sample-flask-/Create-Cluster.yaml'
                    sh 'kubectl rollout restart deploymetns'
                }
                
                steps {
                    script {
                        def externalIP = getExternalIP()
                        echo "External IP: ${externalIP}:5000"
                    }
                }
            }
        }
    }
}

def getExternalIP() {
    return sh(returnStdout: true, script: 'kubectl get service my-flask-app -o jsonpath="{.status.loadBalancer.ingress[0].ip}"').trim()
}
