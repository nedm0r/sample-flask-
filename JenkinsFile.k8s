pipeline {
    agent any
    environment {
        VM_IP = "192.168.59.1"
        DEPLOY_CHOICE = '' // Добавлено: переменная для выбора пользователя
    }

    stages {
        //... другие этапы ...

        stage('Confirm Deployment') {
            steps {
                script {
                    def userInput = input message: 'Какой следующий шаг?', 
                                  parameters: [choice(name: 'DEPLOY_CHOICE', choices: ['Move to Terraform Deploying', 'Move to Deploy'], description: 'Выберите этап развертывания.')]

                    if (userInput == 'Move to Deploy') {
                        env.DEPLOY_CHOICE = 'Deploy'
                    } else {
                        env.DEPLOY_CHOICE = 'Terraform'
                    }
                }
            }
        }

        stage('Terraform Deployment') {
            when {
                expression {
                    env.DEPLOY_CHOICE == 'Terraform'
                }
            }
            steps {
                script {
                    sh 'echo "Deploying with Terraform..."'
                    sh '''
                        cd /var/lib/jenkins/workspace/Pipeline-K8S/sample-flask-/terraform-files/
                        export GOOGLE_APPLICATION_CREDENTIALS="/var/lib/jenkins/.ssh/astute-impulse-393207-a213fc4eab2e.json" 
                        terraform init
                        terraform refresh 
                        terraform apply -auto-approve 
                    '''
                }
            }
        }

        stage('Deploy') {
            when {
                expression {
                    env.DEPLOY_CHOICE == 'Deploy' || env.DEPLOY_CHOICE == 'Terraform'
                }
            }
            steps {
                script {
                    echo "Deploying..."
                    echo "Deploying to production..."
                    //... оставшийся код этапа Deploy ...
                }
            }
        }
    }
}

def getExternalIP() {
    return sh(returnStdout: true, script: 'kubectl get service my-flask-app -o jsonpath="{.status.loadBalancer.ingress[0].ip}"').trim()
}
