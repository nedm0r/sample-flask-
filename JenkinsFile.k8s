pipeline {
    agent any
    parameters {
        string(name: 'VM_IP', defaultValue: '192.168.59.1', description: 'IP address of the windows machine')
    }
    
    environment {
        MYSQL_HOST = 'db'
        MYSQL_USER = 'root'
        MYSQL_DATABASE = 'flask_db'
    }

    stages {
        stage('Cleanup') {
            steps {
                sh 'echo "Performing cleanup..."'
                sh 'pwd'
                sh 'rm -rf *'
            }
        }

        stage('Set Environment Variables') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'MYSQL_PASSWORD', variable: 'mysql-password')]) {
                        echo "Environment variables set"
                    }
                }
            }
        }

        stage('Clone Repository') {
            steps {
                sh 'echo "Cloning repository..."'
                sh 'git clone git@github.com:nedm0r/sample-flask-.git'
            }
        }

        stage('Upload Flask Docker Image') {
            steps {
                sh '''
                    cd ${WORKSPACE}/sample-flask-/flask
                    python3 finddockerver.py
                '''
            }
        }

        stage('Upload MySQL Docker Image') {
            steps {
                sh '''
                    cd ${WORKSPACE}/sample-flask-/Mysql
                    python3 findsqlver.py
                '''
            }
        }

        stage('Prepare Testing Environment') {
            steps {
                sh 'kubectl config use-context docker-desktop'
                sh 'kubectl delete -f ${WORKSPACE}/sample-flask-/Create-Cluster.yaml --ignore-not-found'
            }
        }

        stage('Configure Helm Charts') {
            steps {
                sh '''
                    export GOOGLE_APPLICATION_CREDENTIALS="/var/lib/jenkins/.ssh/astute-impulse-393207-a213fc4eab2e.json"
                    cd ${WORKSPACE}/sample-flask-/helm-files/
                    python3 version-control-helm.py
                    rm -rf charts/*
                    helm package . --destination charts/
                    helm repo index charts/ --url gs://helm-files
                    gsutil cp charts/* gs://helm-files
                    bash helm-install.sh
                '''
            }
        }

        stage('Test Application') {
            steps {
                script {
                    try {
                        echo "Testing test environment..."
                        retry(30) {
                            sleep 20
                            sh "curl ${params.VM_IP}:5000"
                        }
                    } catch (Exception e) {
                        echo "Error: ${e.getMessage()}"
                        error "Failed To Curl Test"
                    }
                }
            }
        }

        stage('Cleanup After Testing') {
            steps {
                sh 'kubectl delete -f ${WORKSPACE}/sample-flask-/Create-Cluster.yaml'
            }
        }

        stage('Confirm Deployment') {
            steps {
                script {
                    env.DEPLOY_CHOICE = 'Deploy'
                    
                    timeout(time: 20, unit: 'SECONDS') {
                        try {
                            def userInput = input message: 'Which stage next?', 
                                parameters: [choice(name: 'DEPLOY_CHOICE', choices: ['Terraform', 'Deploy'], description: 'Select deployment stage.')]
                            if (userInput == 'Terraform') {
                                env.DEPLOY_CHOICE = userInput
                            }
                        } catch (Exception e) {
                            echo "Timeout or another error occurred, defaulting to 'Deploy' stage."
                            env.DEPLOY_CHOICE = 'Deploy'
                        }
                    }
                }
            }
        }

        stage('Terraform Deployment') {
            when {
                expression {
                    env.DEPLOY_CHOICE == 'Terraform'
                }
            }
            steps {
                sh 'echo "Deploying with Terraform..."'
                sh '''
                    cd ${WORKSPACE}/sample-flask-/terraform-files/
                    export GOOGLE_APPLICATION_CREDENTIALS="/var/lib/jenkins/.ssh/astute-impulse-393207-a213fc4eab2e.json" 
                    terraform init
                    terraform refresh 
                    terraform apply -auto-approve 
                '''
            }
        }

        stage('Deploy Application') {
            steps {
                sh 'echo "Deploying..."'
                sh 'gcloud container clusters get-credentials devops-1093-cluster-tf --project=astute-impulse-393207 --zone=us-east1-b'
                sh 'kubectl config use-context gke_astute-impulse-393207_us-east1-b_devops-1093-cluster-tf'
                sh '''
                    export GOOGLE_APPLICATION_CREDENTIALS="/var/lib/jenkins/.ssh/astute-impulse-393207-a213fc4eab2e.json"
                    cd ${WORKSPACE}/sample-flask-/helm-files/
                    bash helm-install.sh
                '''
                
                script {  
                    sleep 10 
                    def externalIP = sh(returnStdout: true, script: 'kubectl get service my-flask-app -o jsonpath="{.status.loadBalancer.ingress[0].ip}"').trim()
                    echo "External IP: ${externalIP}:5000"               
                }
            }
        }
    }
    
    post {
        failure {
            emailext (
                subject: "Build Failed: ${currentBuild.fullDisplayName}",
                body: "The build has failed. Check the console output for details.",
                recipientProviders: [[$class: 'DevelopersRecipientProvider']],
                to: "dionisromanovskyi78@gmail.com"
            )
        }
    }
}
