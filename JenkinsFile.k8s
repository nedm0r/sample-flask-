pipeline {
    agent any
    triggers {
        pollSCM('*/5 * * * *')
    }
    environment {
        VM_IP = "192.168.59.1"
    }
    stages {
        stage('Cleanup') {
            steps {
                script {
                    sh 'echo "Performing cleanup..."'
                    sh 'pwd'
                    sh 'rm -rf *'
                }
            }
        }
        
        stage('Clone') {
            steps {
                script {
                    sh 'echo "Building..."'
                    sh 'git clone git@github.com:nedm0r/sample-flask-.git'
                    sh 'ls'
                }
            }
        }
        
        stage('Upload to Docker Hub') {
            steps {
                script {
                    sh '''
                        cd /var/lib/jenkins/workspace/Pipeline-K8S/sample-flask-/flask
                        python3 finddockerver.py
                        cd /var/lib/jenkins/workspace/Pipeline-K8S/sample-flask-/Mysql
                        python3 findsqlver.py
                    '''
                }
            }
        }
        
        stage('Testing') {
            steps {
                script {
                    sh 'kubectl config use-context docker-desktop'
                    sh 'kubectl delete -f /var/lib/jenkins/workspace/Pipeline-K8S/sample-flask-/Create-Cluster.yaml --ignore-not-found'
                    dir(path: 'workspace/Pipeline-K8S/sample-flask-/my-flask-app-chart/') {
                        sh 'python3 version-control-helm.py'
                        sh 'sudo rm -rf charts/*'
                        sh 'sudo helm package . --destination charts/'
                        dir(path: 'charts/') {
                            sh 'sudo helm repo index . --url gs://helm-files'
                            sh 'gsutil cp * gs://helm-files'
                        }
                        sh 'bash version-control-helm.py'
                    }
                    try {
                        echo "Testing test environment..."
                        retry(30) {
                            sleep 20
                            sh "curl ${env.VM_IP}:5000"
                        }
                    } catch (Exception e) {
                        echo "Error: ${e.getMessage()}"
                        error "Failed To Curl Test"
                    }
                    sh 'kubectl delete -f /var/lib/jenkins/workspace/Pipeline-K8S/sample-flask-/Create-Cluster.yaml'
                }
            }
        }
        
        stage('Confirm Deployment') {
            steps {
                input "Do you want to proceed with the deployment to production?"
            }
        }
        
        stage('Terraform Deployment') {
            steps {
                script {
                    sh 'echo "Deploying with Terraform..."'
                    sh '''
                        cd /var/lib/jenkins/workspace/Pipeline-K8S/sample-flask-/terraform-files/
                        ls
                        chmod +r main.tf variables.auto.tfvars variables.tf
                        export GOOGLE_APPLICATION_CREDENTIALS="/var/lib/jenkins/.ssh/astute-impulse-393207-a213fc4eab2e.json"
                        terraform init
                        terraform refresh 
                        terraform apply -auto-approve 
                    '''
                }
            }
        }
        
        stage('Deploy') {
            steps {
                script {
                    echo "Deploying..."
                    echo "Deploying to production..."
                    
                    sh 'gcloud container clusters get-credentials devops-1093-cluster-tf --project=astute-impulse-393207 --zone=us-east1-b'
                    sh 'kubectl config use-context gke_astute-impulse-393207_us-east1-b_devops-1093-cluster-tf'
                    sh 'kubectl delete replicaset.apps -l app=my-flask-app-deployment'
                    sh 'kubectl delete replicaset.apps -l app=mysql-deployment'
                    sh 'kubectl apply -f /var/lib/jenkins/workspace/Pipeline-K8S/sample-flask-/Create-Cluster.yaml'
                    sh 'kubectl rollout restart deployment/my-flask-app-deployment'
                    sh 'kubectl rollout restart deployment/mysql-deployment'
                    
                    def externalIP = getExternalIP()
                    echo "External IP: ${externalIP}:5000"
                }
            }
        }
    }
}

def getExternalIP() {
    return sh(returnStdout: true, script: 'kubectl get service my-flask-app -o jsonpath="{.status.loadBalancer.ingress[0].ip}"').trim()
}
