import hudson.model.*
import jenkins.model.*
import org.jenkinsci.plugins.*

pipeline {
    agent any
    triggers {
        pollSCM('*/5 * * * *')
    }
    stages {
        stage('Cleanup') {
            steps {
                script {
                    env.VM_IP = "192.168.59.1"
                }
                sh 'echo "Performing cleanup..."'
                sh 'pwd'
                sh 'rm -rf *'
            }
        }
        stage('Clone') {
            steps {
                sh 'echo "Building..."'
                sh 'git clone git@github.com:nedm0r/sample-flask-.git'
                sh 'ls'
            }
        }
        stage('Upload to Docker Hub') {
            steps {
                sh '''
                    cd /var/lib/jenkins/workspace/Pipeline-K8S/sample-flask-/flask
                    python3 finddockerver.py
                    cd /var/lib/jenkins/workspace/Pipeline-K8S/sample-flask-/Mysql
                    python3 findsqlver.py
                '''
            }
        }
        stage('Testing') {
            steps {
                sh 'kubectl config use-context docker-desktop' 
                sh 'kubectl delete -f /var/lib/jenkins/workspace/Pipeline-K8S/sample-flask-/Create-Cluster.yaml --ignore-not-found'
                sh 'kubectl apply -f /var/lib/jenkins/workspace/Pipeline-K8S/sample-flask-/Create-Cluster.yaml'

                // Wait for the deployment to be ready
                script {
                    sh 'sleep 15'
                }

                // Get the external IP of the LoadBalancer service
                script {
                    def externalIP = sh(returnStdout: true, script: 'kubectl get service my-flask-app -o jsonpath="{.status.loadBalancer.ingress[0].ip}"').trim()

                    // Run the 'curl' command to test the application with the external IP and port
                    sh "curl ${env.VM_IP}:5000"
                }
            }
        }
        stage('Confirm Deployment') {
            steps {
                input "Do you want to proceed with the deployment to production?"
            }
        }
        stage('Terraform Deployment') {
            steps {
                sh 'echo "Deploying with Terraform..."'
                sh '''
                    cd /var/lib/jenkins/workspace/Pipeline-K8S/sample-flask-/terraform-files/
                    ls
                    chmod +rx main.tf variables.auto.tfvars variables.tf
                    terraform init
                    terraform import google_storage_bucket.my_bucket bucket-1093-terraform || true
                    terraform import google_container_cluster.gke_cluster projects/astute-impulse-393207/locations/us-east1-b/clusters/devops-1093-cluster-tf || true
                    terraform apply -auto-approve -target=google_container_cluster.gke_cluster -target=google_storage_bucket.my_bucket
                '''
            }
        }
        stage('Deploy') {
            steps {
                sh 'echo "Deploying..."'
                // Add your additional deployment steps here
                sh 'echo "Deploying to production..."'
                
                // Get credentials for the desired context
                sh 'gcloud container clusters get-credentials devops-1093-cluster-tf --project=astute-impulse-393207 --zone=us-east1-b'

                // Switch to the desired context
                sh 'kubectl config use-context gke_astute-impulse-393207_us-east1-b_devops-1093-cluster-tf'

                // Apply the Kubernetes manifest
                sh 'kubectl apply -f /var/lib/jenkins/workspace/Pipeline-K8S/sample-flask-/Create-Cluster.yaml'

                // Wait for the deployment to be ready
                script {
                    sh 'sleep 15'
                }

                // Get the external IP of the LoadBalancer service
                script {
                    def externalIP = sh(returnStdout: true, script: 'kubectl get service my-flask-app -o jsonpath="{.status.loadBalancer.ingress[0].ip}"').trim()

                    // Run the 'curl' command to test the application with the external IP and port
                    sh "curl $externalIP:5000"
                }
            }
        }
    }
}
